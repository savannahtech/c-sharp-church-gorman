// <auto-generated />
using System;
using Data.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Data.Migrations
{
    [DbContext(typeof(ChurchContext))]
    [Migration("20220501164451_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.12");

            modelBuilder.Entity("Data.Entities.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("Parish")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserRole")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Data.Entities.Audit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ParishId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ParishId");

                    b.ToTable("Audits");
                });

            modelBuilder.Entity("Data.Entities.Parish", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PostCode")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Parishes");
                });

            modelBuilder.Entity("Data.Entities.ParishGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ParishId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ParishId");

                    b.ToTable("ParishGroups");
                });

            modelBuilder.Entity("Data.Entities.Parishioner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("FatherId")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("HomeAddress")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("MotherId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Occupation")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ParishId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("PostCode")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ParishId");

                    b.ToTable("Parishioners");
                });

            modelBuilder.Entity("Data.Entities.ParishionerParishGroup", b =>
                {
                    b.Property<Guid?>("ParishionerId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ParishGroupId")
                        .HasColumnType("TEXT");

                    b.HasKey("ParishionerId", "ParishGroupId");

                    b.HasIndex("ParishGroupId");

                    b.ToTable("ParishionerParishGroup");
                });

            modelBuilder.Entity("Data.Entities.Sacrament", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("GodParentId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ParishId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ParishionerId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("PeformedOn")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("PriestId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ParishId");

                    b.HasIndex("ParishionerId");

                    b.ToTable("Sacraments");
                });

            modelBuilder.Entity("Data.Entities.Audit", b =>
                {
                    b.HasOne("Data.Entities.Parish", "Parish")
                        .WithMany("Audits")
                        .HasForeignKey("ParishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parish");
                });

            modelBuilder.Entity("Data.Entities.ParishGroup", b =>
                {
                    b.HasOne("Data.Entities.Parish", "Parish")
                        .WithMany("ChurchGroups")
                        .HasForeignKey("ParishId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Parish");
                });

            modelBuilder.Entity("Data.Entities.Parishioner", b =>
                {
                    b.HasOne("Data.Entities.Parish", "Parish")
                        .WithMany("Parishioners")
                        .HasForeignKey("ParishId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Parish");
                });

            modelBuilder.Entity("Data.Entities.ParishionerParishGroup", b =>
                {
                    b.HasOne("Data.Entities.ParishGroup", "ParishGroup")
                        .WithMany("ParishionerParishGroups")
                        .HasForeignKey("ParishGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Parishioner", "Parishioner")
                        .WithMany("ParishionerParishGroups")
                        .HasForeignKey("ParishionerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParishGroup");

                    b.Navigation("Parishioner");
                });

            modelBuilder.Entity("Data.Entities.Sacrament", b =>
                {
                    b.HasOne("Data.Entities.Parish", "Parish")
                        .WithMany("Sacraments")
                        .HasForeignKey("ParishId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Data.Entities.Parishioner", "Parishioner")
                        .WithMany("Sacraments")
                        .HasForeignKey("ParishionerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parish");

                    b.Navigation("Parishioner");
                });

            modelBuilder.Entity("Data.Entities.Parish", b =>
                {
                    b.Navigation("Audits");

                    b.Navigation("ChurchGroups");

                    b.Navigation("Parishioners");

                    b.Navigation("Sacraments");
                });

            modelBuilder.Entity("Data.Entities.ParishGroup", b =>
                {
                    b.Navigation("ParishionerParishGroups");
                });

            modelBuilder.Entity("Data.Entities.Parishioner", b =>
                {
                    b.Navigation("ParishionerParishGroups");

                    b.Navigation("Sacraments");
                });
#pragma warning restore 612, 618
        }
    }
}
